{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://battleship/./src/modules/ship.js","webpack://battleship/./src/modules/display.js","webpack://battleship/./src/modules/gameLogic.js","webpack://battleship/./src/modules/eventsHandlers.js","webpack://battleship/./src/modules/board.js","webpack://battleship/./src/modules/player.js","webpack://battleship/./src/index.js"],"sourcesContent":["export class Ship {\r\n    constructor(size) {\r\n        this.size = size;\r\n        this.hits = 0;\r\n        this.positions = [];\r\n        this.hitPositions = [];\r\n    }\r\n\r\n    setPosition(row, col, isHorizontal) {\r\n        if (row < 0 || col < 0 || row >= 10 || col >= 10 || \r\n            (isHorizontal && col + this.size > 10) || \r\n            (!isHorizontal && row + this.size > 10)) {\r\n            throw new Error(`Invalid ship placement: row=${row}, col=${col}, size=${this.size}, horizontal=${isHorizontal}`);\r\n        }\r\n        this.positions = [];\r\n        for (let i = 0; i < this.size; i++) {\r\n            const r = isHorizontal ? row : row + i;\r\n            const c = isHorizontal ? col + i : col;\r\n            this.positions.push([r, c]);\r\n        }\r\n    }\r\n\r\n\r\n    hit(row, col) {\r\n        const hitPosition = this.positions.some(([r, c]) => r === row && c === col);\r\n        if (hitPosition) {\r\n            const alreadyHit = this.hitPositions.some(([r, c]) => r === row && c === col);\r\n            if (alreadyHit) {\r\n                return false;\r\n            } else {\r\n                this.hitPositions.push([row, col]);\r\n                this.hits++;\r\n                return true;\r\n            }\r\n        } \r\n        return false;\r\n    }\r\n\r\n    isSunk() {\r\n        return this.hits >= this.size;\r\n    }\r\n}","import { Ship } from \"./ship.js\";\r\n\r\nexport class GameDisplay {\r\n    constructor(gridElement, board) {\r\n        this.gridElement = gridElement;\r\n        this.board = board;\r\n    }\r\n\r\n    createGrid() {\r\n        for (let row = 0; row < 10; row++) {\r\n            for (let col = 0; col < 10; col++) {\r\n                const cell = document.createElement('div');\r\n                cell.classList.add('cell');\r\n                cell.dataset.row = row;\r\n                cell.dataset.col = col;\r\n                this.gridElement.appendChild(cell);\r\n            }\r\n        }\r\n    }\r\n\r\n    updateGrid(showShips = false) {\r\n        const cells = this.gridElement.querySelectorAll('.cell');\r\n        cells.forEach(cell => {\r\n            const row = parseInt(cell.dataset.row);\r\n            const col = parseInt(cell.dataset.col);\r\n            cell.classList.remove('ship', 'hit', 'miss');\r\n            const cellContent = this.board.getCell(row, col);\r\n            if (showShips && cellContent instanceof Ship) {\r\n                cell.classList.add('ship');\r\n            }\r\n            if (cellContent?.hitPositions?.some(([r, c]) => r === row && c === col)) {\r\n                cell.classList.add('hit');\r\n            } else if (cell.dataset.attacked === 'true') { \r\n                cell.classList.add('miss');\r\n            }\r\n        });\r\n    }\r\n\r\n    markAttack(row, col, hit) {\r\n        const cell = this.gridElement.querySelector(\r\n            `.cell[data-row=\"${row}\"][data-col=\"${col}\"]`\r\n        );\r\n        cell.dataset.attacked = true;\r\n        cell.classList.add(hit ? 'hit' : 'miss');\r\n    }\r\n\r\n    clearGrid() {\r\n        const cells = this.gridElement.querySelectorAll('.cell'); \r\n        cells.forEach(cell => {\r\n            cell.classList.remove('ship', 'hit', 'miss');\r\n            delete cell.dataset.attacked;\r\n        });\r\n        if (this.board) {\r\n            this.board.reset();\r\n        }\r\n    }\r\n}","// import { Board } from './board.js';\r\n\r\nexport class BattleLogic {\r\n    constructor(player, computer) {\r\n        this.player = player;\r\n        this.computer = computer;\r\n        this.gameState = 'setup';\r\n        this.gameActive = false;\r\n        this.currentTurn = null;\r\n        this.moveHistory = [];\r\n        this.scores = {\r\n            player: 0,\r\n            computer: 0\r\n        };\r\n\r\n        this.lastComputerHit = null;\r\n        this.potentialTargets = [];\r\n\r\n        //add code\r\n        this.hitSequence = [];\r\n        this.unhitCells = [];\r\n    }\r\n\r\n    initialize() {\r\n        this.player.setupShips();\r\n        this.computer.setupShips();\r\n        this.player.setEnemyBoard(this.computer.board);\r\n        this.computer.setEnemyBoard(this.player.board);\r\n        this.gameState = 'setup';\r\n        this.moveHistory = [];\r\n        this.hitSequence = [];\r\n        \r\n        this.unhitCells = [];\r\n        for (let r = 0; r < 10; r++) {\r\n            for(let c = 0; c < 10; c++) {\r\n                this.unhitCells.push([r, c]);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    startGame() {\r\n        if(!this.player.board.ships.length || !this.computer.board.ships.length) {\r\n            this.initialize();\r\n        }\r\n        this.gameState = 'playing';\r\n        this.gameActive = true;\r\n        this.currentTurn = 'player';\r\n    }\r\n\r\n    playerTurn(row, col) {\r\n        if (!this.gameActive || this.currentTurn !== 'player' || this.gameState !== 'playing') return null;\r\n\r\n        const enemyCell = this.computer.board.getCell(row, col);\r\n        const alreadyAttacked = enemyCell?.hitPositions?.some(([r, c]) => r === row && c === col);\r\n\r\n        if (alreadyAttacked) return null;\r\n\r\n        const hit = enemyCell?.hit(row, col) || false;\r\n        this.moveHistory.push({\r\n            player: this.player.name, \r\n            row,\r\n            col,\r\n            hit,\r\n            timestamp: Date.now()\r\n        });\r\n\r\n        if (hit) this.scores.player += 10;\r\n\r\n        this.currentTurn = 'computer';\r\n        return { row, col, hit};\r\n\r\n    }\r\n\r\n\r\n    computerTurn() {\r\n        if (!this.gameActive || this.currentTurn !== 'computer' || this.gameState !== 'playing' ) return null;\r\n\r\n        let row, col, enemyCell;\r\n\r\n        if (this.lastComputerHit && this.potentialTargets.length > 0) {\r\n            const target = this.potentialTargets.shift();\r\n            row = target[0];\r\n            col = target[1];\r\n        } else {\r\n            const index = Math.floor(Math.random() * this.unhitCells.length);\r\n            const target = this.unhitCells.splice(index, 1)[0];\r\n            row = target[0];\r\n            col = target[1];\r\n        }   \r\n\r\n        enemyCell = this.player.board.getCell(row, col);\r\n        const hit = enemyCell?.hit(row, col) || false;\r\n\r\n        if (hit) {\r\n            this.scores.computer += 10;\r\n            this.lastComputerHit = [row, col];\r\n            // add\r\n            this.hitSequence.push([row, col])\r\n            this.moveHistory.push({\r\n                player: this.computer.name,\r\n                row,\r\n                col,\r\n                hit,\r\n                timestamp: Date.now()\r\n            });\r\n            if (enemyCell?.isSunk()) {\r\n                this.hitSequence = []; \r\n                console.log('Hit sequence:', this.hitSequence)\r\n                this.lastComputerHit = null;\r\n                this.potentialTargets = [];\r\n            } else {\r\n                this.updatePotentialTargets(row, col);\r\n            }\r\n        } else {\r\n            if (!this.potentialTargets.length) {\r\n                this.lastComputerHit = null;\r\n            }\r\n        }\r\n        \r\n\r\n        this.currentTurn = 'player';\r\n        return { row, col, hit };\r\n\r\n    }\r\n\r\n\r\n    updatePotentialTargets(row, col) {\r\n        const directions = [\r\n            [-1, 0], [1, 0], [0, -1], [0, 1]\r\n        ];\r\n\r\n        this.potentialTargets = [];\r\n        let isHorizontal = false;\r\n        let isVertical = false;\r\n        let lastHit = null;\r\n        let secondLastHit = null;\r\n        //optimization AI\r\n        if (this.hitSequence.length >= 2) {\r\n            lastHit = this.hitSequence[this.hitSequence.length - 1];\r\n            secondLastHit = this.hitSequence[this.hitSequence.length - 2];\r\n            isHorizontal = lastHit[0] === secondLastHit[0];\r\n            isVertical = lastHit[1] === secondLastHit[1];\r\n\r\n\r\n            if (isHorizontal) {\r\n                if (col - 1 >= 0) {\r\n                    const cellLeft = this.player.board.getCell(row, col - 1);\r\n                    const hitLeft = cellLeft?.hitPositions?.some(([r, c]) => r === row && c === col - 1);\r\n                    if(!hitLeft) this.potentialTargets.push([row, col - 1]);\r\n                } \r\n                if (col + 1 < 10) {\r\n                    // Same checks for [row, col + 1]\r\n                }\r\n                console.log('Working?', this.potentialTargets);\r\n            } \r\n            if (isVertical) {\r\n                if(row - 1 >= 0) {\r\n                    // Same checks for [row - 1, col]\r\n                }\r\n                if (row + 1 < 10) {\r\n                    const cellDown = this.player.board.getCell(row + 1, col);\r\n                    const hitDown = cellDown?.hitPositions?.some(([r, c]) => r === row + 1 && c === col);\r\n                    if(!hitDown) this.potentialTargets.push([row + 1, col]);\r\n                }\r\n            }\r\n            if (isHorizontal) {\r\n                if (col + 1 < 10) {\r\n                    const cellRight = this.player.board.getCell(row, col + 1);\r\n                    const hitRight = cellRight?.hitPositions?.some(([r, c]) => r === row && c === col + 1);\r\n                    if(!hitRight) this.potentialTargets.push([row, col + 1]);\r\n                }\r\n            }\r\n            if (isVertical) {\r\n                if (row - 1 >= 0) {\r\n                    const cellUp = this.player.board.getCell(row - 1, col);\r\n                    const hitUp = cellUp?.hitPositions.some(([r, c]) => r === row - 1 && c === col);\r\n                    if (!hitUp) this.potentialTargets.push([row - 1, col]);\r\n                }\r\n            }\r\n        } else {\r\n            directions.forEach(([dr, dc]) => {\r\n                const newRow = row + dr;\r\n                const newCol = col + dc;\r\n                if(newRow >= 0 && newRow < 10 && newCol >= 0 && newCol < 10) {\r\n                    const cell = this.player.board.getCell(newRow, newCol);\r\n                    const alreadyHit = cell?.hitPositions?.some(([r, c]) => r === newRow && c === newCol);\r\n                    if (!alreadyHit) {\r\n                        this.potentialTargets.push([newRow, newCol]);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    checkWinner() {\r\n        if (this.computer.board.ships.every(ship => ship.isSunk())) {\r\n            this.scores.player += 100;\r\n            return this.player.name;\r\n        }\r\n\r\n        if (this.player.board.ships.every(ship => ship.isSunk())) {\r\n            this.scores.computer += 100;\r\n            return this.computer.name;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    endGame(winner) {\r\n        this.gameActive = false;\r\n        this.currentTurn = null;\r\n        this.gameState = 'finished';\r\n        this.lastComputerHit = null;\r\n        this.potentialTargets = [];\r\n        alert(`${winner} wins!\\nScores:\\n${this.player.name}: ${this.scores.player}\\n${this.computer.name}: ${this.scores.computer}`);\r\n    }\r\n\r\n    restartGame() {\r\n        this.gameState = 'setup';\r\n        this.gameActive = false;\r\n        this.currentTurn = null;\r\n        this.moveHistory = [];\r\n        this.lastComputerHit = null;\r\n        this.potentialTargets = [];\r\n        this.player.board.reset();\r\n        this.computer.board.reset();\r\n        this.initialize();\r\n    }\r\n\r\n    getGameState() {\r\n        return this.gameState;\r\n    }\r\n\r\n    getScores() {\r\n        return { ...this.scores };\r\n    }\r\n\r\n    getMoveHistory() {\r\n        return [...this.moveHistory];\r\n    }\r\n}","export class EventManager {\r\n    constructor(playerDisplay, computerDisplay, battleLogic) {\r\n        this.playerDisplay = playerDisplay;\r\n        this.computerDisplay = computerDisplay;\r\n        this.battleLogic = battleLogic;\r\n        this.placeShipsBtn = document.querySelector('#placeShips');\r\n        this.startGameBtn = document.querySelector('#startGame');\r\n        this.restartGameBtn = document.querySelector('#restartGame');\r\n\r\n        this.setupComputerGridClicks();\r\n        this.setupRestartButton();\r\n    }\r\n\r\n    setupListeners() {\r\n        this.placeShipsBtn.addEventListener('click', () => {\r\n            this.battleLogic.initialize();\r\n            this.playerDisplay.updateGrid(true);\r\n            this.computerDisplay.updateGrid(false);\r\n        });\r\n\r\n        this.startGameBtn.addEventListener('click', () => {\r\n            this.battleLogic.startGame();\r\n            this.playerDisplay.updateGrid(true);\r\n            this.computerDisplay.updateGrid(false);\r\n        });\r\n    }\r\n\r\n\r\n    setupComputerGridClicks() {\r\n        const cells = this.computerDisplay.gridElement.querySelectorAll('.cell');\r\n        cells.forEach(cell => {\r\n            cell.addEventListener('click', () => {\r\n                if (!this.battleLogic.gameActive || this.battleLogic.currentTurn !== 'player') return;\r\n                const row = parseInt(cell.dataset.row);\r\n                const col = parseInt(cell.dataset.col);\r\n                const playerResult = this.battleLogic.playerTurn(row, col);\r\n                if (playerResult) {\r\n                    this.computerDisplay.markAttack(playerResult.row, playerResult.col, playerResult.hit);\r\n                    this.computerDisplay.updateGrid(false);\r\n                    const winner = this.battleLogic.checkWinner();\r\n                    if (winner) {\r\n                        setTimeout(() =>\r\n                            this.battleLogic.endGame(winner), 500);\r\n                            setTimeout(() => {\r\n                                this.playerDisplay.clearGrid();\r\n                                this.computerDisplay.clearGrid();\r\n                                this.battleLogic.restartGame();\r\n                                this.playerDisplay.updateGrid(true);\r\n                                this.computerDisplay.updateGrid(false);\r\n                                this.setupComputerGridClicks();\r\n                            }, 1000)\r\n                        return;\r\n                    }\r\n                    setTimeout(() => {\r\n                        const compResult = this.battleLogic.computerTurn();\r\n                        if (compResult) {\r\n                            this.playerDisplay.markAttack(compResult.row, compResult.col, compResult.hit);\r\n                            this.playerDisplay.updateGrid(true);\r\n                            const winner = this.battleLogic.checkWinner();\r\n                            if (winner) {\r\n                                setTimeout(() => this.battleLogic.endGame(winner), 500);\r\n                                    setTimeout(() => {\r\n                                        this.playerDisplay.clearGrid();\r\n                                        this.computerDisplay.clearGrid();\r\n                                        this.battleLogic.restartGame();\r\n                                        this.playerDisplay.updateGrid(true);\r\n                                        this.computerDisplay.updateGrid(false);\r\n                                        this.setupComputerGridClicks();\r\n                                    }, 1000)\r\n                            }\r\n                        } else {\r\n                            console.log('Computer turn failed');\r\n                        }\r\n                    }, 1000);\r\n                } else {\r\n                    console.log('Player turn failed')\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n\r\n    setupRestartButton() {\r\n        if (this.restartGameBtn) {\r\n            this.restartGameBtn.addEventListener('click', () => {\r\n                this.battleLogic.restartGame();\r\n                this.playerDisplay.clearGrid();\r\n                this.computerDisplay.clearGrid();\r\n                this.playerDisplay.updateGrid(true);\r\n                this.computerDisplay.updateGrid(false);\r\n            });\r\n        } else {\r\n            this.restartGameBtn = document.createElement('button');\r\n            this.restartGameBtn.id = 'restartGame';\r\n            this.restartGameBtn.textContent = 'Restart Game';\r\n            this.restartGameBtn.className = 'button restart';\r\n            document.querySelector('.buttons').appendChild(this.restartGameBtn);\r\n            this.restartGameBtn.addEventListener('click', () => {\r\n                this.battleLogic.restartGame();\r\n                this.playerDisplay.clearGrid();\r\n                this.computerDisplay.clearGrid();\r\n                this.playerDisplay.updateGrid(true);\r\n                this.computerDisplay.updateGrid(false);\r\n            })\r\n        }\r\n    }\r\n}","import { Ship } from './ship.js';\r\n\r\nexport class Board {\r\n    constructor(shipSizes = [5, 4, 3, 2, 2]) {\r\n        this.grid = Array(10).fill().map(() => Array(10).fill(null));\r\n        this.ships = [];\r\n        this.shipSizes = shipSizes;\r\n        this.hits = 0;\r\n        this.miss = 0;\r\n    }\r\n\r\n    canPlaceShip(row, col, size, isHorizontal) {\r\n        const buffer = 2;\r\n        for(let i = 0; i < size; i++) {\r\n            const r = isHorizontal ? row : row + i;\r\n            const c = isHorizontal ? col + i : col;\r\n            if (r >= 10 || c >= 10) return false;\r\n\r\n            for(let dr = -buffer; dr <= buffer; dr++) {\r\n                for(let dc = -buffer; dc <= buffer; dc++) {\r\n                    const checkRow = r + dr;\r\n                    const checkCol = c + dc;\r\n                    if(checkRow >= 0 && checkRow < 10 &&\r\n                       checkCol >= 0 && checkCol < 10 &&\r\n                       this.grid[checkRow][checkCol] !== null \r\n                    ) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    placeAllShips() {\r\n        try {\r\n            this.shipSizes.forEach(size => this.placeShip(size));\r\n        } catch (error) {\r\n            console.log('Clear board', error.message);\r\n            this.reset();\r\n            this.placeAllShips();\r\n        }\r\n    }\r\n\r\n    placeShip(size) {\r\n        const ship = new Ship(size);\r\n        let placed = false;\r\n        let attempts = 0;\r\n        const maxAttempts = 100;\r\n        while(!placed && attempts < maxAttempts) {\r\n            const isHorizontal = Math.random() > 0.5;\r\n            const row = Math.floor(Math.random() * 10);\r\n            const col = Math.floor(Math.random() * 10);\r\n            if (this.canPlaceShip(row, col, size, isHorizontal)) {\r\n                ship.setPosition(row, col, isHorizontal);\r\n                ship.positions.forEach(([r, c]) => this.grid[r][c] = ship);\r\n                this.ships.push(ship);\r\n                placed = true;\r\n            }\r\n            attempts++;\r\n        }\r\n        if (!placed) {\r\n            throw new Error(\"Unable to place ship: not enough space\"); \r\n        }\r\n    }\r\n\r\n    \r\n\r\n    getCell(row, col) {\r\n        return this.grid[row][col];\r\n    }\r\n\r\n    // reset method\r\n    reset() { \r\n        this.grid.forEach(row => row.fill(null));\r\n        this.ships = [];\r\n        this.hits = 0;\r\n        this.misses = 0;\r\n    }\r\n}","import { Board } from \"./board.js\";\r\n\r\nexport class Player {\r\n    constructor(name, isComputer = false) {\r\n        this.name = name;\r\n        this.isComputer = isComputer;\r\n        this.board = new Board();\r\n        this.enemyBoard = null;\r\n    }\r\n\r\n    setupShips() {\r\n        this.board.placeAllShips();\r\n    }\r\n\r\n    setEnemyBoard(enemyBoard) {\r\n        this.enemyBoard = enemyBoard;\r\n    }\r\n\r\n    // // Add code\r\n\r\n    // checkWinner() {\r\n    //     if (this.enemyBoard && this.enemyBoard.ships.every(ship => ship.isSunk())) {\r\n    //         return `${this.name} wins`;\r\n    //     }\r\n    //     return null;\r\n    // }\r\n }","import { GameDisplay } from \"./modules/display.js\";\r\nimport { BattleLogic } from \"./modules/gameLogic.js\";\r\nimport { EventManager } from \"./modules/eventsHandlers.js\";\r\nimport { Player } from \"./modules/player.js\";\r\n\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const playerGrid = document.querySelector('.player-grid');\r\n    const computerGrid = document.querySelector('.computer-grid');\r\n\r\n    const player = new Player('Player');\r\n    const computer = new Player('Computer', true);\r\n\r\n    const playerDisplay = new GameDisplay(playerGrid, player.board);\r\n    const computerDisplay = new GameDisplay(computerGrid, computer.board);\r\n\r\n    playerDisplay.createGrid();\r\n    computerDisplay.createGrid();\r\n\r\n    const battleLogic = new BattleLogic(player, computer);\r\n    const eventManager = new EventManager(playerDisplay, computerDisplay, battleLogic);\r\n\r\n\r\n    \r\n    try {\r\n        eventManager.setupListeners();\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n});\r\n\r\n\r\n"],"names":["Ship","constructor","size","this","hits","positions","hitPositions","setPosition","row","col","isHorizontal","Error","i","r","c","push","hit","some","isSunk","GameDisplay","gridElement","board","createGrid","cell","document","createElement","classList","add","dataset","appendChild","updateGrid","showShips","querySelectorAll","forEach","parseInt","remove","cellContent","getCell","attacked","markAttack","querySelector","clearGrid","reset","BattleLogic","player","computer","gameState","gameActive","currentTurn","moveHistory","scores","lastComputerHit","potentialTargets","hitSequence","unhitCells","initialize","setupShips","setEnemyBoard","startGame","ships","length","playerTurn","enemyCell","alreadyAttacked","name","timestamp","Date","now","computerTurn","target","shift","index","Math","floor","random","splice","console","log","updatePotentialTargets","isVertical","lastHit","secondLastHit","cellLeft","hitLeft","cellDown","hitDown","cellRight","hitRight","cellUp","hitUp","dr","dc","newRow","newCol","alreadyHit","checkWinner","every","ship","endGame","winner","alert","restartGame","getGameState","getScores","getMoveHistory","EventManager","playerDisplay","computerDisplay","battleLogic","placeShipsBtn","startGameBtn","restartGameBtn","setupComputerGridClicks","setupRestartButton","setupListeners","addEventListener","playerResult","setTimeout","compResult","id","textContent","className","Board","shipSizes","grid","Array","fill","map","miss","canPlaceShip","checkRow","checkCol","placeAllShips","placeShip","error","message","placed","attempts","misses","Player","isComputer","enemyBoard","playerGrid","computerGrid","eventManager"],"sourceRoot":""}