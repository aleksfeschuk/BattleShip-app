{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;AAAiC;AACjC;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,UAAU;AACjC;AACA;AACA;AACA;AACA,kCAAkC,cAAc;AAChD,sCAAsC,cAAc;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,0CAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC/EiC;AACjC;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,UAAU;AACpC,8BAA8B,UAAU;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,0CAAI;AACxD;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,+BAA+B,IAAI,eAAe,IAAI;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACxDO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,0BAA0B;AAC1B;AACA;AACA,qBAAqB;AACrB,kBAAkB;AAClB;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;;;;;;;;;;;;;AC1GA,YAAY,QAAQ;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ,kBAAkB,iBAAiB,IAAI,mBAAmB,IAAI,mBAAmB,IAAI,qBAAqB;AACnI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACjPmC;AACnC;AACO;AACP;AACA;AACA;AACA,yBAAyB,4CAAK;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,WAAW;AACpC;AACA;AACA;AACA;;;;;;;;;;;;;;AC1BO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,IAAI,QAAQ,IAAI,SAAS,UAAU,eAAe,aAAa;AAC1H;AACA;AACA,wBAAwB,eAAe;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;UCzCA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;ACNmD;AACE;AACM;AACd;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,sDAAM;AAC7B,yBAAyB,sDAAM;AAC/B;AACA,8BAA8B,4DAAW;AACzC,gCAAgC,4DAAW;AAC3C;AACA;AACA;AACA;AACA,4BAA4B,8DAAW;AACvC,6BAA6B,oEAAY;AACzC;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,CAAC;AACD;AACA","sources":["webpack://battleship/./src/modules/board.js","webpack://battleship/./src/modules/display.js","webpack://battleship/./src/modules/eventsHandlers.js","webpack://battleship/./src/modules/gameLogic.js","webpack://battleship/./src/modules/player.js","webpack://battleship/./src/modules/ship.js","webpack://battleship/webpack/bootstrap","webpack://battleship/webpack/runtime/define property getters","webpack://battleship/webpack/runtime/hasOwnProperty shorthand","webpack://battleship/webpack/runtime/make namespace object","webpack://battleship/./src/index.js"],"sourcesContent":["import { Ship } from './ship.js';\r\n\r\nexport class Board {\r\n    constructor(shipSizes = [5, 4, 3, 2, 2]) {\r\n        this.grid = Array(10).fill().map(() => Array(10).fill(null));\r\n        this.ships = [];\r\n        this.shipSizes = shipSizes;\r\n        this.hits = 0;\r\n        this.miss = 0;\r\n    }\r\n\r\n    canPlaceShip(row, col, size, isHorizontal) {\r\n        const buffer = 2;\r\n        for(let i = 0; i < size; i++) {\r\n            const r = isHorizontal ? row : row + i;\r\n            const c = isHorizontal ? col + i : col;\r\n            if (r >= 10 || c >= 10) return false;\r\n\r\n            for(let dr = -buffer; dr <= buffer; dr++) {\r\n                for(let dc = -buffer; dc <= buffer; dc++) {\r\n                    const checkRow = r + dr;\r\n                    const checkCol = c + dc;\r\n                    if(checkRow >= 0 && checkRow < 10 &&\r\n                       checkCol >= 0 && checkCol < 10 &&\r\n                       this.grid[checkRow][checkCol] !== null \r\n                    ) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    placeAllShips() {\r\n        try {\r\n            this.shipSizes.forEach(size => this.placeShip(size));\r\n        } catch (error) {\r\n            console.log('Clear board', error.message);\r\n            this.reset();\r\n            this.placeAllShips();\r\n        }\r\n    }\r\n\r\n    placeShip(size) {\r\n        const ship = new Ship(size);\r\n        let placed = false;\r\n        let attempts = 0;\r\n        const maxAttempts = 100;\r\n        while(!placed && attempts < maxAttempts) {\r\n            const isHorizontal = Math.random() > 0.5;\r\n            const row = Math.floor(Math.random() * 10);\r\n            const col = Math.floor(Math.random() * 10);\r\n            if (this.canPlaceShip(row, col, size, isHorizontal)) {\r\n                ship.setPosition(row, col, isHorizontal);\r\n                ship.positions.forEach(([r, c]) => this.grid[r][c] = ship);\r\n                this.ships.push(ship);\r\n                placed = true;\r\n            }\r\n            attempts++;\r\n        }\r\n        if (!placed) {\r\n            throw new Error(\"Unable to place ship: not enough space\"); \r\n        }\r\n    }\r\n\r\n    \r\n\r\n    getCell(row, col) {\r\n        return this.grid[row][col];\r\n    }\r\n\r\n    // reset method\r\n    reset() { \r\n        this.grid.forEach(row => row.fill(null));\r\n        this.ships = [];\r\n        this.hits = 0;\r\n        this.misses = 0;\r\n    }\r\n}","import { Ship } from \"./ship.js\";\r\n\r\nexport class GameDisplay {\r\n    constructor(gridElement, board) {\r\n        this.gridElement = gridElement;\r\n        this.board = board;\r\n    }\r\n\r\n    createGrid() {\r\n        for (let row = 0; row < 10; row++) {\r\n            for (let col = 0; col < 10; col++) {\r\n                const cell = document.createElement('div');\r\n                cell.classList.add('cell');\r\n                cell.dataset.row = row;\r\n                cell.dataset.col = col;\r\n                this.gridElement.appendChild(cell);\r\n            }\r\n        }\r\n    }\r\n\r\n    updateGrid(showShips = false) {\r\n        const cells = this.gridElement.querySelectorAll('.cell');\r\n        cells.forEach(cell => {\r\n            const row = parseInt(cell.dataset.row);\r\n            const col = parseInt(cell.dataset.col);\r\n            cell.classList.remove('ship', 'hit', 'miss');\r\n            const cellContent = this.board.getCell(row, col);\r\n            if (showShips && cellContent instanceof Ship) {\r\n                cell.classList.add('ship');\r\n            }\r\n            if (cellContent?.hitPositions?.some(([r, c]) => r === row && c === col)) {\r\n                cell.classList.add('hit');\r\n            } else if (cell.dataset.attacked === 'true') { \r\n                cell.classList.add('miss');\r\n            }\r\n        });\r\n    }\r\n\r\n    markAttack(row, col, hit) {\r\n        const cell = this.gridElement.querySelector(\r\n            `.cell[data-row=\"${row}\"][data-col=\"${col}\"]`\r\n        );\r\n        cell.dataset.attacked = true;\r\n        cell.classList.add(hit ? 'hit' : 'miss');\r\n    }\r\n\r\n    clearGrid() {\r\n        const cells = this.gridElement.querySelectorAll('.cell'); \r\n        cells.forEach(cell => {\r\n            cell.classList.remove('ship', 'hit', 'miss');\r\n            delete cell.dataset.attacked;\r\n        });\r\n        if (this.board) {\r\n            this.board.reset();\r\n        }\r\n    }\r\n}","export class EventManager {\r\n    constructor(playerDisplay, computerDisplay, battleLogic) {\r\n        this.playerDisplay = playerDisplay;\r\n        this.computerDisplay = computerDisplay;\r\n        this.battleLogic = battleLogic;\r\n        this.placeShipsBtn = document.querySelector('#placeShips');\r\n        this.startGameBtn = document.querySelector('#startGame');\r\n        this.restartGameBtn = document.querySelector('#restartGame');\r\n\r\n        this.setupComputerGridClicks();\r\n        this.setupRestartButton();\r\n    }\r\n\r\n    setupListeners() {\r\n        this.placeShipsBtn.addEventListener('click', () => {\r\n            this.battleLogic.initialize();\r\n            this.playerDisplay.updateGrid(true);\r\n            this.computerDisplay.updateGrid(false);\r\n        });\r\n\r\n        this.startGameBtn.addEventListener('click', () => {\r\n            this.battleLogic.startGame();\r\n            this.playerDisplay.updateGrid(true);\r\n            this.computerDisplay.updateGrid(false);\r\n        });\r\n    }\r\n\r\n\r\n    setupComputerGridClicks() {\r\n        const cells = this.computerDisplay.gridElement.querySelectorAll('.cell');\r\n        cells.forEach(cell => {\r\n            cell.addEventListener('click', () => {\r\n                if (!this.battleLogic.gameActive || this.battleLogic.currentTurn !== 'player') return;\r\n                const row = parseInt(cell.dataset.row);\r\n                const col = parseInt(cell.dataset.col);\r\n                const playerResult = this.battleLogic.playerTurn(row, col);\r\n                if (playerResult) {\r\n                    this.computerDisplay.markAttack(playerResult.row, playerResult.col, playerResult.hit);\r\n                    this.computerDisplay.updateGrid(false);\r\n                    const winner = this.battleLogic.checkWinner();\r\n                    if (winner) {\r\n                        setTimeout(() =>\r\n                            this.battleLogic.endGame(winner), 500);\r\n                            setTimeout(() => {\r\n                                this.playerDisplay.clearGrid();\r\n                                this.computerDisplay.clearGrid();\r\n                                this.battleLogic.restartGame();\r\n                                this.playerDisplay.updateGrid(true);\r\n                                this.computerDisplay.updateGrid(false);\r\n                                this.setupComputerGridClicks();\r\n                            }, 1000)\r\n                        return;\r\n                    }\r\n                    setTimeout(() => {\r\n                        const compResult = this.battleLogic.computerTurn();\r\n                        if (compResult) {\r\n                            this.playerDisplay.markAttack(compResult.row, compResult.col, compResult.hit);\r\n                            this.playerDisplay.updateGrid(true);\r\n                            const winner = this.battleLogic.checkWinner();\r\n                            if (winner) {\r\n                                setTimeout(() => this.battleLogic.endGame(winner), 500);\r\n                                    setTimeout(() => {\r\n                                        this.playerDisplay.clearGrid();\r\n                                        this.computerDisplay.clearGrid();\r\n                                        this.battleLogic.restartGame();\r\n                                        this.playerDisplay.updateGrid(true);\r\n                                        this.computerDisplay.updateGrid(false);\r\n                                        this.setupComputerGridClicks();\r\n                                    }, 1000)\r\n                            }\r\n                        } else {\r\n                            console.log('Computer turn failed');\r\n                        }\r\n                    }, 1000);\r\n                } else {\r\n                    console.log('Player turn failed')\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n\r\n    setupRestartButton() {\r\n        if (this.restartGameBtn) {\r\n            this.restartGameBtn.addEventListener('click', () => {\r\n                this.battleLogic.restartGame();\r\n                this.playerDisplay.clearGrid();\r\n                this.computerDisplay.clearGrid();\r\n                this.playerDisplay.updateGrid(true);\r\n                this.computerDisplay.updateGrid(false);\r\n            });\r\n        } else {\r\n            this.restartGameBtn = document.createElement('button');\r\n            this.restartGameBtn.id = 'restartGame';\r\n            this.restartGameBtn.textContent = 'Restart Game';\r\n            this.restartGameBtn.className = 'button restart';\r\n            document.querySelector('.buttons').appendChild(this.restartGameBtn);\r\n            this.restartGameBtn.addEventListener('click', () => {\r\n                this.battleLogic.restartGame();\r\n                this.playerDisplay.clearGrid();\r\n                this.computerDisplay.clearGrid();\r\n                this.playerDisplay.updateGrid(true);\r\n                this.computerDisplay.updateGrid(false);\r\n            })\r\n        }\r\n    }\r\n}","// import { Board } from './board.js';\r\n\r\nexport class BattleLogic {\r\n    constructor(player, computer) {\r\n        this.player = player;\r\n        this.computer = computer;\r\n        this.gameState = 'setup';\r\n        this.gameActive = false;\r\n        this.currentTurn = null;\r\n        this.moveHistory = [];\r\n        this.scores = {\r\n            player: 0,\r\n            computer: 0\r\n        };\r\n\r\n        this.lastComputerHit = null;\r\n        this.potentialTargets = [];\r\n\r\n        //add code\r\n        this.hitSequence = [];\r\n        this.unhitCells = [];\r\n    }\r\n\r\n    initialize() {\r\n        this.player.setupShips();\r\n        this.computer.setupShips();\r\n        this.player.setEnemyBoard(this.computer.board);\r\n        this.computer.setEnemyBoard(this.player.board);\r\n        this.gameState = 'setup';\r\n        this.moveHistory = [];\r\n        this.hitSequence = [];\r\n        \r\n        this.unhitCells = [];\r\n        for (let r = 0; r < 10; r++) {\r\n            for(let c = 0; c < 10; c++) {\r\n                this.unhitCells.push([r, c]);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    startGame() {\r\n        if(!this.player.board.ships.length || !this.computer.board.ships.length) {\r\n            this.initialize();\r\n        }\r\n        this.gameState = 'playing';\r\n        this.gameActive = true;\r\n        this.currentTurn = 'player';\r\n    }\r\n\r\n    playerTurn(row, col) {\r\n        if (!this.gameActive || this.currentTurn !== 'player' || this.gameState !== 'playing') return null;\r\n\r\n        const enemyCell = this.computer.board.getCell(row, col);\r\n        const alreadyAttacked = enemyCell?.hitPositions?.some(([r, c]) => r === row && c === col);\r\n\r\n        if (alreadyAttacked) return null;\r\n\r\n        const hit = enemyCell?.hit(row, col) || false;\r\n        this.moveHistory.push({\r\n            player: this.player.name, \r\n            row,\r\n            col,\r\n            hit,\r\n            timestamp: Date.now()\r\n        });\r\n\r\n        if (hit) this.scores.player += 10;\r\n\r\n        this.currentTurn = 'computer';\r\n        return { row, col, hit};\r\n\r\n    }\r\n\r\n\r\n    computerTurn() {\r\n        if (!this.gameActive || this.currentTurn !== 'computer' || this.gameState !== 'playing' ) return null;\r\n\r\n        let row, col, enemyCell;\r\n\r\n        if (this.lastComputerHit && this.potentialTargets.length > 0) {\r\n            const target = this.potentialTargets.shift();\r\n            row = target[0];\r\n            col = target[1];\r\n        } else {\r\n            const index = Math.floor(Math.random() * this.unhitCells.length);\r\n            const target = this.unhitCells.splice(index, 1)[0];\r\n            row = target[0];\r\n            col = target[1];\r\n        }   \r\n\r\n        enemyCell = this.player.board.getCell(row, col);\r\n        const hit = enemyCell?.hit(row, col) || false;\r\n\r\n        if (hit) {\r\n            this.scores.computer += 10;\r\n            this.lastComputerHit = [row, col];\r\n            // add\r\n            this.hitSequence.push([row, col])\r\n            this.moveHistory.push({\r\n                player: this.computer.name,\r\n                row,\r\n                col,\r\n                hit,\r\n                timestamp: Date.now()\r\n            });\r\n            if (enemyCell?.isSunk()) {\r\n                this.hitSequence = []; \r\n                console.log('Hit sequence:', this.hitSequence)\r\n                this.lastComputerHit = null;\r\n                this.potentialTargets = [];\r\n            } else {\r\n                this.updatePotentialTargets(row, col);\r\n            }\r\n        } else {\r\n            if (!this.potentialTargets.length) {\r\n                this.lastComputerHit = null;\r\n            }\r\n        }\r\n        \r\n\r\n        this.currentTurn = 'player';\r\n        return { row, col, hit };\r\n\r\n    }\r\n\r\n\r\n    updatePotentialTargets(row, col) {\r\n        const directions = [\r\n            [-1, 0], [1, 0], [0, -1], [0, 1]\r\n        ];\r\n\r\n        this.potentialTargets = [];\r\n        let isHorizontal = false;\r\n        let isVertical = false;\r\n        let lastHit = null;\r\n        let secondLastHit = null;\r\n        //optimization AI\r\n        if (this.hitSequence.length >= 2) {\r\n            lastHit = this.hitSequence[this.hitSequence.length - 1];\r\n            secondLastHit = this.hitSequence[this.hitSequence.length - 2];\r\n            isHorizontal = lastHit[0] === secondLastHit[0];\r\n            isVertical = lastHit[1] === secondLastHit[1];\r\n\r\n\r\n            if (isHorizontal) {\r\n                if (col - 1 >= 0) {\r\n                    const cellLeft = this.player.board.getCell(row, col - 1);\r\n                    const hitLeft = cellLeft?.hitPositions?.some(([r, c]) => r === row && c === col - 1);\r\n                    if(!hitLeft) this.potentialTargets.push([row, col - 1]);\r\n                } \r\n                if (col + 1 < 10) {\r\n                    // Same checks for [row, col + 1]\r\n                }\r\n                console.log('Working?', this.potentialTargets);\r\n            } \r\n            if (isVertical) {\r\n                if(row - 1 >= 0) {\r\n                    // Same checks for [row - 1, col]\r\n                }\r\n                if (row + 1 < 10) {\r\n                    const cellDown = this.player.board.getCell(row + 1, col);\r\n                    const hitDown = cellDown?.hitPositions?.some(([r, c]) => r === row + 1 && c === col);\r\n                    if(!hitDown) this.potentialTargets.push([row + 1, col]);\r\n                }\r\n            }\r\n            if (isHorizontal) {\r\n                if (col + 1 < 10) {\r\n                    const cellRight = this.player.board.getCell(row, col + 1);\r\n                    const hitRight = cellRight?.hitPositions?.some(([r, c]) => r === row && c === col + 1);\r\n                    if(!hitRight) this.potentialTargets.push([row, col + 1]);\r\n                }\r\n            }\r\n            if (isVertical) {\r\n                if (row - 1 >= 0) {\r\n                    const cellUp = this.player.board.getCell(row - 1, col);\r\n                    const hitUp = cellUp?.hitPositions.some(([r, c]) => r === row - 1 && c === col);\r\n                    if (!hitUp) this.potentialTargets.push([row - 1, col]);\r\n                }\r\n            }\r\n        } else {\r\n            directions.forEach(([dr, dc]) => {\r\n                const newRow = row + dr;\r\n                const newCol = col + dc;\r\n                if(newRow >= 0 && newRow < 10 && newCol >= 0 && newCol < 10) {\r\n                    const cell = this.player.board.getCell(newRow, newCol);\r\n                    const alreadyHit = cell?.hitPositions?.some(([r, c]) => r === newRow && c === newCol);\r\n                    if (!alreadyHit) {\r\n                        this.potentialTargets.push([newRow, newCol]);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    checkWinner() {\r\n        if (this.computer.board.ships.every(ship => ship.isSunk())) {\r\n            this.scores.player += 100;\r\n            return this.player.name;\r\n        }\r\n\r\n        if (this.player.board.ships.every(ship => ship.isSunk())) {\r\n            this.scores.computer += 100;\r\n            return this.computer.name;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    endGame(winner) {\r\n        this.gameActive = false;\r\n        this.currentTurn = null;\r\n        this.gameState = 'finished';\r\n        this.lastComputerHit = null;\r\n        this.potentialTargets = [];\r\n        alert(`${winner} wins!\\nScores:\\n${this.player.name}: ${this.scores.player}\\n${this.computer.name}: ${this.scores.computer}`);\r\n    }\r\n\r\n    restartGame() {\r\n        this.gameState = 'setup';\r\n        this.gameActive = false;\r\n        this.currentTurn = null;\r\n        this.moveHistory = [];\r\n        this.lastComputerHit = null;\r\n        this.potentialTargets = [];\r\n        this.player.board.reset();\r\n        this.computer.board.reset();\r\n        this.initialize();\r\n    }\r\n\r\n    getGameState() {\r\n        return this.gameState;\r\n    }\r\n\r\n    getScores() {\r\n        return { ...this.scores };\r\n    }\r\n\r\n    getMoveHistory() {\r\n        return [...this.moveHistory];\r\n    }\r\n}","import { Board } from \"./board.js\";\r\n\r\nexport class Player {\r\n    constructor(name, isComputer = false) {\r\n        this.name = name;\r\n        this.isComputer = isComputer;\r\n        this.board = new Board();\r\n        this.enemyBoard = null;\r\n    }\r\n\r\n    setupShips() {\r\n        this.board.placeAllShips();\r\n    }\r\n\r\n    setEnemyBoard(enemyBoard) {\r\n        this.enemyBoard = enemyBoard;\r\n    }\r\n\r\n    // // Add code\r\n\r\n    // checkWinner() {\r\n    //     if (this.enemyBoard && this.enemyBoard.ships.every(ship => ship.isSunk())) {\r\n    //         return `${this.name} wins`;\r\n    //     }\r\n    //     return null;\r\n    // }\r\n }","export class Ship {\r\n    constructor(size) {\r\n        this.size = size;\r\n        this.hits = 0;\r\n        this.positions = [];\r\n        this.hitPositions = [];\r\n    }\r\n\r\n    setPosition(row, col, isHorizontal) {\r\n        if (row < 0 || col < 0 || row >= 10 || col >= 10 || \r\n            (isHorizontal && col + this.size > 10) || \r\n            (!isHorizontal && row + this.size > 10)) {\r\n            throw new Error(`Invalid ship placement: row=${row}, col=${col}, size=${this.size}, horizontal=${isHorizontal}`);\r\n        }\r\n        this.positions = [];\r\n        for (let i = 0; i < this.size; i++) {\r\n            const r = isHorizontal ? row : row + i;\r\n            const c = isHorizontal ? col + i : col;\r\n            this.positions.push([r, c]);\r\n        }\r\n    }\r\n\r\n\r\n    hit(row, col) {\r\n        const hitPosition = this.positions.some(([r, c]) => r === row && c === col);\r\n        if (hitPosition) {\r\n            const alreadyHit = this.hitPositions.some(([r, c]) => r === row && c === col);\r\n            if (alreadyHit) {\r\n                return false;\r\n            } else {\r\n                this.hitPositions.push([row, col]);\r\n                this.hits++;\r\n                return true;\r\n            }\r\n        } \r\n        return false;\r\n    }\r\n\r\n    isSunk() {\r\n        return this.hits >= this.size;\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { GameDisplay } from \"./modules/display.js\";\r\nimport { BattleLogic } from \"./modules/gameLogic.js\";\r\nimport { EventManager } from \"./modules/eventsHandlers.js\";\r\nimport { Player } from \"./modules/player.js\";\r\n\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const playerGrid = document.querySelector('.player-grid');\r\n    const computerGrid = document.querySelector('.computer-grid');\r\n\r\n    const player = new Player('Player');\r\n    const computer = new Player('Computer', true);\r\n\r\n    const playerDisplay = new GameDisplay(playerGrid, player.board);\r\n    const computerDisplay = new GameDisplay(computerGrid, computer.board);\r\n\r\n    playerDisplay.createGrid();\r\n    computerDisplay.createGrid();\r\n\r\n    const battleLogic = new BattleLogic(player, computer);\r\n    const eventManager = new EventManager(playerDisplay, computerDisplay, battleLogic);\r\n\r\n\r\n    \r\n    try {\r\n        eventManager.setupListeners();\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n});\r\n\r\n\r\n"],"names":[],"sourceRoot":""}